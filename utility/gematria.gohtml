{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text from which to compute gematria]"
  (carg "string" "text") }}

{{ $text := or .ExecData.Description ($args.Get 0) }}
{{ $text = reReplace `â€Ž` $text "" }}

{{ $globalCategoryID := toInt (dbGet 0 "Global").Value }}
{{ $commandsCategoryID := toInt (dbGet 0 "Commands").Value }}
{{ $channelsCategoryID := toInt (dbGet 0 "Channels").Value }}

{{ $gematriaDict := (dbGet $globalCategoryID "Gematria Dictionary").Value }}
{{ $tarotDict := (dbGet $globalCategoryID "Tarot Dictionary").Value }}
{{ $deleteTriggerDelay := or (toInt (dbGet $globalCategoryID "Delete Trigger Delay").Value) 5 }}
{{ $embed_exec := toInt (dbGet $commandsCategoryID "embed_exec").Value }}
{{ $yagpdbChannelID := toInt (dbGet $channelsCategoryID "YAGPDB Channel ID").Value }}

{{ $wordLengthValues := cslice }}
{{ $totalLength := 0 }}
{{ $gematriaValues := cslice }}
{{ $totalGematria := 0 }}
{{ $words := reSplit "[[:space:]]+" $text }}
{{ $numWords := len $words }}
{{ $firstWord := index $words 0 }}
{{- range $i, $word := $words -}}
  {{- $wordLength := (len (toRune $word)) -}}
  {{- $wordLengthValues = $wordLengthValues.Append (toString $wordLength) -}}
  {{- $totalLength = add $totalLength $wordLength -}}
  {{- $gematriaValue := 0 -}}
  {{- range $j, $char := split $word "" -}}
    {{- $curVal := index $gematriaDict $char -}}
    {{- $gematriaValue = add $gematriaValue $curVal -}}
  {{- end -}}
  {{- $gematriaValues = $gematriaValues.Append (toString $gematriaValue) -}}
  {{- $totalGematria = add $totalGematria $gematriaValue -}}
{{- end -}}

{{ $allGematriaValues := $gematriaValues.Append (toString $totalGematria) }}
{{ $firstReductionValues := cslice }}
{{ $secondReductionValues := cslice }}
{{ $finalReductionValues := cslice }}
{{ $totalFirstReduction := 0 }}
{{ $totalSecondReduction := 0 }}
{{ $totalFinalReduction := 0 }}

{{- range $i, $gematriaValue := $allGematriaValues -}}
  {{- $firstReductionValue := 0 -}}
  {{- range $j, $digit := split $gematriaValue "" -}}
    {{- $firstReductionValue = add $firstReductionValue (toInt $digit) -}}
  {{- end -}}

  {{- $secondReductionValue := 0 -}}
  {{- range $j, $digit := split (toString $firstReductionValue) "" -}}
      {{- $secondReductionValue = add $secondReductionValue (toInt $digit) -}}
  {{- end -}}

  {{- $finalReductionValue := 0 -}}
  {{- range $j, $digit := split (toString $secondReductionValue) "" -}}
    {{- $finalReductionValue = add $finalReductionValue (toInt $digit) -}}
  {{- end -}}

  {{- if eq $i $numWords -}}
    {{- $totalFirstReduction = $firstReductionValue -}}
    {{- $totalSecondReduction = $secondReductionValue -}}
    {{- $totalFinalReduction = $finalReductionValue -}}
  {{- else -}}
    {{- $firstReductionValues = $firstReductionValues.Append (toString $firstReductionValue) -}}
    {{- $secondReductionValues = $secondReductionValues.Append (toString $secondReductionValue) -}}
    {{- $finalReductionValues = $finalReductionValues.Append (toString $finalReductionValue) -}}
  {{- end -}}
{{- end -}}

{{ $openGroup := "" }}
{{ $closeGroup := "" }}
{{ $connector := " > " }}
{{ if gt $numWords 1 }}
  {{ $openGroup = "[" }}
  {{ $closeGroup = "]" }}
{{ end }}
{{ $wordLength := joinStr ""
  $openGroup (joinStr " " $wordLengthValues.StringSlice) $closeGroup
}}
{{ $wordGematriaReduction := joinStr ""
  $openGroup (joinStr " " $gematriaValues.StringSlice) $closeGroup
}}
{{ if ne (json $gematriaValues) (json $firstReductionValues) }}
  {{ $wordGematriaReduction = joinStr "" $wordGematriaReduction $connector
    $openGroup (joinStr " " $firstReductionValues.StringSlice) $closeGroup
  }}
  {{ if ne (json $firstReductionValues) (json $secondReductionValues) }}
    {{ $wordGematriaReduction = joinStr "" $wordGematriaReduction $connector
      $openGroup (joinStr " " $secondReductionValues.StringSlice) $closeGroup
    }}
    {{ if ne (json $secondReductionValues) (json $finalReductionValues) }}
      {{ $wordGematriaReduction = joinStr "" $wordGematriaReduction $connector
        $openGroup (joinStr " " $finalReductionValues.StringSlice) $closeGroup
      }}
    {{ end }}
  {{ end }}
{{ end }}
{{ $totalGematriaReduction := (toString $totalGematria) }}
{{ if ne $totalGematria $totalFirstReduction }}
  {{ $totalGematriaReduction = joinStr "" $totalGematriaReduction " > " $totalFirstReduction }}
  {{ if ne $totalFirstReduction $totalSecondReduction }}
    {{ $totalGematriaReduction = joinStr "" $totalGematriaReduction " > " $totalSecondReduction }}
    {{ if ne $totalSecondReduction $totalFinalReduction }}
      {{ $totalGematriaReduction = joinStr "" $totalGematriaReduction " > " $totalFinalReduction }}
    {{ end }}
  {{ end }}
{{ end }}

{{ $fields := cslice }}
{{ if and (eq 1 $numWords) (eq 1 (len (toRune $firstWord))) }}
  {{ $fields = $fields.Append (sdict "name" "Letter Gematria" "value" (toString $totalGematria) "inline" false) }}
  {{ $tarotCard := index $tarotDict $firstWord }}
  {{ if $tarotCard }}
    {{ $fields = $fields.Append (sdict "name" "Tarot Card" "value" $tarotCard "inline" false) }}
  {{ end }}
{{ else }}
  {{ if gt $numWords 1 }}
    {{ $fields = $fields.Append (sdict "name" "Word Count" "value" (toString $numWords) "inline" false) }}
  {{ end }}
  {{ $fields = $fields.Append (sdict "name" "Word Length" "value" $wordLength "inline" false) }}
  {{ $fields = $fields.Append (sdict "name" "Word Gematria" "value" $wordGematriaReduction "inline" false) }}
  {{ if gt $numWords 1 }}
    {{ $fields = $fields.Append (sdict "name" "Total Length" "value" (toString $totalLength) "inline" false) }}
    {{ $fields = $fields.Append (sdict "name" "Total Gematria" "value" $totalGematriaReduction "inline" false) }}
  {{ end }}
{{ end }}
{{ if .ExecData.Fields }}
  {{ $fields = $fields.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagpdbChannelID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $fields
) }}

{{ deleteTrigger $deleteTriggerDelay }}
