{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text]" (carg "string" "text") }}
{{ $text := or .ExecData.Description ($args.Get 0) }}

{{ $gCatID := toInt (dbGet 0 "Global").Value }}
{{ $commCatID := toInt (dbGet 0 "Commands").Value }}
{{ $chanCatID := toInt (dbGet 0 "Channels").Value }}

{{ $dGem := (dbGet $gCatID "Gematria Dictionary").Value }}
{{ $dHebIdx := (dbGet $gCatID "Hebrew Index Dictionary").Value }}
{{ $delTrigDelay := or (toInt (dbGet $gCatID "Delete Trigger Delay").Value) 5 }}
{{ $embed_exec := toInt (dbGet $commCatID "embed_exec").Value }}
{{ $yagChanID := toInt (dbGet $chanCatID "YAGPDB Channel ID").Value }}

{{ define "reduce" }}
  {{ $dData := . }}
  {{ $redStep := $dData.Get "redStep" }}
  {{ if lt $redStep 10 }}
    {{ return $dData }}
  {{ else }}
    {{ $reds := $dData.Get "reds" }}
    {{ $dep := $dData.Get "dep" }}
    {{ $sep := $dData.Get "sep" }}

    {{ $redNextStep := 0 }}
    {{ $digs := split (toString $redStep) "" }}
    {{- range $d := $digs -}}
      {{- $redNextStep = add $redNextStep (toInt $d) -}}
    {{- end -}}
    {{ $reds = $reds.Append (joinStr "" $redNextStep $sep) }}
    {{ $dep = add $dep 1 }}

    {{ $dData.Set "redStep" $redNextStep }}
    {{ $dData.Set "reds" $reds }}
    {{ $dData.Set "dep" $dep }}

    {{ return (execTemplate "reduce" $dData) }}
  {{ end }}
{{ end }}

{{ define "updateData" }}
  {{ $dData := . }}
  {{ $dToUpdate := $dData.Get "dict" }}
  {{ $sep := $dData.Get "sep" }}
  {{ $tNew := $dData.Get "tok" }}
  {{ $lNew := $dData.Get "len" }}
  {{ $vNew := $dData.Get "val" }}
  {{ $redsNew := $dData.Get "reds" }}
  {{ $depNew := $dData.Get "dep" }}

  {{ $toks := $dToUpdate.Get "toks" }}
  {{ $toks = $toks.Append $tNew }}
  {{ $dToUpdate.Set "toks" $toks }}

  {{ $lens := $dToUpdate.Get "lens" }}
  {{ $lens = $lens.Append (joinStr "" $lNew $sep) }}
  {{ $dToUpdate.Set "lens" $lens }}

  {{ $vals := $dToUpdate.Get "vals" }}
  {{ $vals = $vals.Append (joinStr "" $vNew $sep) }}
  {{ $dToUpdate.Set "vals" $vals }}

  {{ $reds := $dToUpdate.Get "reds" }}
  {{ $reds = $reds.Append $redsNew }}
  {{ $dToUpdate.Set "reds" $reds }}

  {{ $dep := $dToUpdate.Get "dep" }}
  {{ if le $depNew $dep }}
    {{ $depNew = $dep }}
  {{ end }}
  {{ $dToUpdate.Set "dep" $depNew }}

  {{ return $dData }}
{{ end }}

{{ define "buildGemStrs" }}
  {{ $dData := . }}
  {{ $reds := $dData.Get "reds" }}

  {{ $tokCt := len ($dData.Get "toks") }}
  {{ $sepL := "`" }}
  {{ $sepR := "`" }}
  {{ if gt $tokCt 1 }}
    {{ $sepL = "`[ " }}
    {{ $sepR = " ]`" }}
  {{ end }}
  {{ $lenStr := joinStr "" $sepL (joinStr " " ($dData.Get "lens").StringSlice) $sepR }}

  {{ $gemStr := "" }}
  {{ $redsPrev := cslice }}
  {{- range $i := seq -1 ($dData.Get "dep") -}}
    {{- $iVal := "" -}}
    {{- $join := "" -}}
    {{- if lt $i 0 -}}
      {{- $redsPrev = ($dData.Get "vals") -}}
      {{- $iVal = joinStr "" $sepL (joinStr " " $redsPrev.StringSlice) $sepR -}}
    {{- else -}}
      {{- $redsCur := cslice -}}
      {{- range $j := seq 0 $tokCt -}}
        {{- $tokReds := index $reds $j -}}
        {{- if gt (len $tokReds) $i -}}
          {{- $redsCur = $redsCur.Append (index $tokReds $i) -}}
        {{- else -}}
          {{- $redsCur = $redsCur.Append (index $redsPrev $j) -}}
        {{- end -}}
      {{- end -}}
      {{- $iVal = joinStr "" $sepL (joinStr " " $redsCur.StringSlice) $sepR -}}
      {{- $join = " > " -}}
      {{- $redsPrev = $redsCur -}}
    {{- end -}}
    {{- $gemStr = joinStr $join $gemStr $iVal -}}
  {{- end -}}

  {{ $dData.Set "ct" $tokCt }}
  {{ $dData.Set "lenStr" $lenStr }}
  {{ $dData.Set "gemStr" $gemStr }}

  {{ return $dData }}
{{ end }}

{{ $dData := sdict "t" sdict "l" sdict "w" sdict }}
{{- range $k, $v := $dData -}}
  {{- $dEntry := sdict "toks" cslice "lens" cslice "vals" cslice "reds" cslice "dep" 0 -}}
  {{- $dData.Set $k $dEntry -}}
{{- end -}}

{{ $tLen := 0 }}
{{ $tVal := 0 }}
{{ $tReds := cslice }}
{{ $tDep := 0 }}

{{ $lines := split $text "\n" }}
{{- range $i, $l := $lines -}}
  {{- $lLen := 0 -}}
  {{- $lVal := 0 -}}
  {{- $lReds := cslice -}}
  {{- $lDep := 0 -}}

  {{- $words := split $l " " -}}
  {{- range $j, $w := $words -}}
    {{- $wLen := 0 -}}
    {{- $wVal := 0 -}}
    {{- $wReds := cslice -}}
    {{- $wDep := 0 -}}

    {{- $sep := "" -}}
    {{- if and (ne $i (sub (len $lines) 1)) (eq $j (sub (len $words) 1)) -}}
      {{- $sep = " |" -}}
    {{- end -}}

    {{- $chars := split $w "" -}}
    {{- range $c := $chars -}}
      {{- $cVal := $dGem.Get $c -}}
      {{- if $cVal -}}
        {{- $wLen = add $wLen 1 -}}
        {{- $wVal = add $wVal $cVal -}}
      {{- end -}}
    {{- end -}}

    {{- $wRedParam := sdict "redStep" $wVal "reds" $wReds "dep" $wDep "sep" $sep -}}
    {{- $wRedRes := execTemplate "reduce" $wRedParam -}}

    {{- $wUdParam := sdict "dict" ($dData.Get "w") "sep" $sep "tok" $w "len" $wLen "val" $wVal
      "reds" ($wRedRes.Get "reds") "dep" ($wRedRes.Get "dep") -}}
    {{- $wUdRes := execTemplate "updateData" $wUdParam -}}
    {{- $dData.Set "w" ($wUdRes.Get "dict") -}}

    {{- $lLen = add $lLen $wLen -}}
    {{- $lVal = add $lVal $wVal -}}
  {{- end -}}

  {{- $lRedParam := sdict "redStep" $lVal "reds" $lReds "dep" $lDep "sep" "" -}}
  {{- $lRedRes := execTemplate "reduce" $lRedParam -}}

  {{- $lUdParam := sdict
    "dict" ($dData.Get "l") "sep" "" "tok" $l "len" $lLen "val" $lVal
    "reds" ($lRedRes.Get "reds") "dep" ($lRedRes.Get "dep") -}}
  {{- $lUdRes := execTemplate "updateData" $lUdParam -}}
  {{- $dData.Set "l" ($lUdRes.Get "dict") -}}

  {{- $tLen = add $tLen $lLen -}}
  {{- $tVal = add $tVal $lVal -}}
{{- end -}}

{{ $tRedParam := sdict "redStep" $tVal "reds" $tReds "dep" $tDep "sep" "" }}
{{ $tRedRes := execTemplate "reduce" $tRedParam }}

{{ $tUdParam := sdict
  "dict" ($dData.Get "t") "sep" "" "tok" $text "len" $tLen "val" $tVal
  "reds" ($tRedRes.Get "reds") "dep" ($tRedRes.Get "dep") }}
{{ $tUdRes := execTemplate "updateData" $tUdParam }}
{{ $dData.Set "t" ($tUdRes.Get "dict") }}

{{ $wBgsRes := execTemplate "buildGemStrs" ($dData.Get "w") }}
{{ $wCt := $wBgsRes.Get "ct" }}
{{ $wLen := $wBgsRes.Get "lenStr" }}
{{ $wGem := $wBgsRes.Get "gemStr" }}

{{ $lBgsRes := execTemplate "buildGemStrs" ($dData.Get "l") }}
{{ $lCt := $lBgsRes.Get "ct" }}
{{ $lLen := $lBgsRes.Get "lenStr" }}
{{ $lGem := $lBgsRes.Get "gemStr" }}

{{ $tBgsRes := execTemplate "buildGemStrs" ($dData.Get "t") }}
{{ $tGem := $tBgsRes.Get "gemStr" }}

{{ $f := cslice }}
{{ $wFirst := index (($dData.Get "w").Get "toks") 0 }}
{{ if and (eq 1 $wCt) (eq 1 (len (toRune $wFirst))) }}
  {{ $f = $f.Append (sdict "name" "Letter Gematria" "value" $tGem) }}
  {{ if $dHebIdx.HasKey $wFirst }}
    {{ $cIdx := $dHebIdx.Get $wFirst }}
    {{ $cNum := add 1 $cIdx }}
    {{ $f = $f.Append (sdict "name" "Letter Number" "value" (joinStr "" "`" $cNum "`")) }}

    {{ $dRwsNum := (dbGet $gCatID "RWS Numeral Dictionary").Value }}
    {{ $dThothNum := (dbGet $gCatID "Thoth Numeral Dictionary").Value }}
    {{ $dRwsCard := (dbGet $gCatID "RWS Tarot Dictionary").Value }}
    {{ $dThothCard := (dbGet $gCatID "Thoth Tarot Dictionary").Value }}

    {{ $rwsCard := joinStr " - " ($dRwsNum.Get $cIdx) ($dRwsCard.Get $cIdx) }}
    {{ $thothCard := joinStr " - " ($dThothNum.Get $cIdx) ($dThothCard.Get $cIdx) }}
    {{ if eq $rwsCard $thothCard }}
      {{ $f = $f.Append (sdict "name" "Major Arcana" "value" $rwsCard) }}
    {{ else }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (RWS)" "value" $rwsCard) }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (Thoth)" "value" $thothCard) }}
    {{ end }}
  {{ end }}
{{ else }}
  {{ if gt $wCt 1 }}
    {{ $f = $f.Append (sdict "name" "Word Count" "value" (joinStr "" "`" $wCt "`")) }}
  {{ end }}
  {{ $f = $f.Append (sdict "name" "Word Length" "value" $wLen) }}
  {{ $f = $f.Append (sdict "name" "Word Gematria" "value" $wGem) }}
  {{ if and (gt $lCt 1) (ne $wCt $lCt) }}
    {{ $f = $f.Append (sdict "name" "Line Count" "value" (joinStr "" "`" $lCt "`")) }}
    {{ $f = $f.Append (sdict "name" "Line Length" "value" $lLen) }}
    {{ $f = $f.Append (sdict "name" "Line Gematria" "value" $lGem) }}
  {{ end }}
  {{ if gt $wCt 1 }}
    {{ $f = $f.Append (sdict "name" "Total Length" "value" (joinStr "" "`" $tLen "`")) }}
    {{ $f = $f.Append (sdict "name" "Total Gematria" "value" $tGem) }}
  {{ end }}
{{ end }}
{{ if .ExecData.Fields }}
  {{ $f = $f.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagChanID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $f
) }}

{{ deleteTrigger $delTrigDelay }}
