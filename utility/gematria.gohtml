{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text]" (carg "string" "text") }}

{{ $text := or .ExecData.Description ($args.Get 0) }}
{{ $text = reReplace `â€Ž` $text "" }}

{{ $gCatID := toInt (dbGet 0 "Global").Value }}
{{ $commCatID := toInt (dbGet 0 "Commands").Value }}
{{ $chanCatID := toInt (dbGet 0 "Channels").Value }}

{{ $dGem := (dbGet $gCatID "Gematria Dictionary").Value }}
{{ $dHebIdx := (dbGet $gCatID "Hebrew Index Dictionary").Value }}
{{ $delTrigDelay := or (toInt (dbGet $gCatID "Delete Trigger Delay").Value) 5 }}
{{ $embed_exec := toInt (dbGet $commCatID "embed_exec").Value }}
{{ $yagChanID := toInt (dbGet $chanCatID "YAGPDB Channel ID").Value }}

{{ $dText := sdict "t" "" "l" cslice "w" cslice }}
{{ $dLen := sdict "t" 0 "l" cslice "w" cslice }}
{{ $dVal := sdict "t" 0 "l" cslice "w" cslice }}
{{ $dRed := sdict "t" cslice "l" cslice "w" cslice }}

{{ $tLen := 0 }}
{{ $tVal := 0 }}
{{ $tRed := cslice }}
{{ $tDep := 0 }}

{{ $lMaxDep := 0 }}
{{ $wMaxDep := 0 }}

{{ $lines := split $text "\n" }}
{{- range $i, $l := $lines -}}
  {{- $lLen := 0 -}}
  {{- $lVal := 0 -}}
  {{- $lRed := cslice -}}
  {{- $lDep := 0 -}}

  {{- $words := split $l " " -}}
  {{- range $j, $w := $words -}}
    {{- $wLen := 0 -}}
    {{- $wVal := 0 -}}
    {{- $wRed := cslice -}}
    {{- $wDep := 0 -}}

    {{- $lSep := "" }}
    {{- if and (ne $i (sub (len $lines) 1)) (eq $j (sub (len $words) 1)) -}}
      {{- $lSep = " |" }}
    {{- end -}}

    {{- $chars := split $w "" -}}
    {{- range $c := $chars -}}
      {{- $cVal := $dGem.Get $c -}}
      {{- if $cVal -}}
        {{- $wLen = add $wLen 1 -}}
        {{- $wVal = add $wVal $cVal -}}
      {{- end -}}
    {{- end -}}

    {{- $red := $wVal -}}
    {{- while ge $red 10 -}}
      {{- $redStep := 0 -}}
      {{- $digits := split (toString $red) "" -}}
      {{- range $d := $digits -}}
        {{- $redStep = add $redStep (toInt $d) -}}
      {{- end -}}
      {{- $wRed = $wRed.Append (joinStr "" $redStep $lSep) -}}
      {{- $red = $redStep -}}
      {{- $wDep = add $wDep 1 -}}
    {{- end -}}

    {{- $wsText := $dText.Get "w" -}}
    {{- $wsText = $wsText.Append $w -}}
    {{- $dText.Set "w" $wsText -}}

    {{- $wsLen := $dLen.Get "w" -}}
    {{- $wsLen = $wsLen.Append (joinStr "" $wLen $lSep) -}}
    {{- $dLen.Set "w" $wsLen -}}

    {{- $wsVal := $dVal.Get "w" -}}
    {{- $wsVal = $wsVal.Append (joinStr "" $wVal $lSep) -}}
    {{- $dVal.Set "w" $wsVal -}}

    {{- $wsRed := $dRed.Get "w" -}}
    {{- $wsRed = $wsRed.Append $wRed -}}
    {{- $dRed.Set "w" $wsRed -}}

    {{- if gt $wDep $wMaxDep -}}
      {{- $wMaxDep = $wDep -}}
    {{- end -}}

    {{- $lLen = add $lLen $wLen -}}
    {{- $lVal = add $lVal $wVal -}}
  {{- end -}}

  {{- $red := $lVal -}}
  {{- while ge $red 10 -}}
    {{- $redStep := 0 -}}
    {{- $digits := split (toString $red) "" -}}
    {{- range $d := $digits -}}
      {{- $redStep = add $redStep (toInt $d) -}}
    {{- end -}}
    {{- $lRed = $lRed.Append (toString $redStep) -}}
    {{- $red = $redStep -}}
    {{- $lDep = add $lDep 1 -}}
  {{- end -}}

  {{- $lsText := $dText.Get "l" -}}
  {{- $lsText = $lsText.Append $l -}}
  {{- $dText.Set "l" $lsText -}}

  {{- $lsLen := $dLen.Get "l" -}}
  {{- $lsLen = $lsLen.Append (toString $lLen) -}}
  {{- $dLen.Set "l" $lsLen -}}

  {{- $lsVal := $dVal.Get "l" -}}
  {{- $lsVal = $lsVal.Append (toString $lVal) -}}
  {{- $dVal.Set "l" $lsVal -}}

  {{- $lsRed := $dRed.Get "l" -}}
  {{- $lsRed = $lsRed.Append $lRed -}}
  {{- $dRed.Set "l" $lsRed -}}

  {{- if gt $lDep $lMaxDep -}}
    {{- $lMaxDep = $lDep -}}
  {{- end -}}

  {{- $tLen = add $tLen $lLen -}}
  {{- $tVal = add $tVal $lVal -}}
{{- end -}}

{{ $red := $tVal }}
{{- while ge $red 10 -}}
  {{- $redStep := 0 -}}
  {{- $digits := split (toString $red) "" -}}
  {{- range $d := $digits -}}
    {{- $redStep = add $redStep (toInt $d) -}}
  {{- end -}}
  {{- $tRed = $tRed.Append (toString $redStep) -}}
  {{- $red = $redStep -}}
  {{- $tDep = add $tDep 1 -}}
{{- end -}}

{{ $dText.Set "t" $text }}
{{ $dLen.Set "t" $tLen }}
{{ $dVal.Set "t" $tVal }}
{{ $dRed.Set "t" $tRed }}

{{ $wsNum := len ($dText.Get "w") }}
{{ $lsNum := len ($dText.Get "l") }}
{{ $wFirst := index ($dText.Get "w") 0 }}

{{ $wSepL := "`" }}
{{ $wSepR := "`" }}
{{ if gt $wsNum 1 }}
  {{ $wSepL = "`[ " }}
  {{ $wSepR = " ]`" }}
{{ end }}
{{ $wLen := joinStr "" $wSepL (joinStr " " ($dLen.Get "w").StringSlice) $wSepR }}

{{ $lSepL := "`" }}
{{ $lSepR := "`" }}
{{ if gt $lsNum 1 }}
  {{ $lSepL = "`[ " }}
  {{ $lSepR = " ]`" }}
{{ end }}
{{ $lLen := joinStr "" $lSepL (joinStr " " ($dLen.Get "l").StringSlice) $lSepR }}

{{ $wGem := "" }}
{{ $wRedPrev := cslice }}
{{- range $i := seq -1 $wMaxDep -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $wRedPrev = $dVal.Get "w" -}}
    {{- $iVal = joinStr "" $wSepL (joinStr " " $wRedPrev.StringSlice) $wSepR -}}
  {{- else -}}
    {{- $wRedCur := cslice -}}
    {{- range $j := seq 0 $wsNum -}}
      {{- $wsRed := index ($dRed.Get "w") $j -}}
      {{- if gt (len $wsRed) $i -}}
        {{- $wRedCur = $wRedCur.Append (index $wsRed $i) -}}
      {{- else -}}
        {{- $wRedCur = $wRedCur.Append (index $wRedPrev $j) -}}
      {{- end -}}
    {{- end -}}
    {{- $iVal = joinStr "" $wSepL (joinStr " " $wRedCur.StringSlice) $wSepR -}}
    {{- $join = " > " -}}
    {{- $wRedPrev = $wRedCur -}}
  {{- end -}}
  {{- $wGem = joinStr $join $wGem $iVal -}}
{{- end -}}

{{ $lGem := "" }}
{{ $lRedPrev := cslice }}
{{- range $i := seq -1 $lMaxDep -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $lRedPrev = $dVal.Get "l" -}}
    {{- $iVal = joinStr "" $lSepL (joinStr " " $lRedPrev.StringSlice) $lSepR -}}
  {{- else -}}
    {{- $lRedCur := cslice -}}
    {{- range $j := seq 0 $lsNum -}}
      {{- $lsRed := index ($dRed.Get "l") $j -}}
      {{- if gt (len $lsRed) $i -}}
        {{- $lRedCur = $lRedCur.Append (index $lsRed $i) -}}
      {{- else -}}
        {{- $lRedCur = $lRedCur.Append (index $lRedPrev $j) -}}
      {{- end -}}
    {{- end -}}
    {{- $iVal = joinStr "" $lSepL (joinStr " " $lRedCur.StringSlice) $lSepR -}}
    {{- $join = " > " -}}
    {{- $lRedPrev = $lRedCur -}}
  {{- end -}}
  {{- $lGem = joinStr $join $lGem $iVal -}}
{{- end -}}

{{ $tGem := "" }}
{{- range $i := seq -1 $tDep -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $iVal = toString $tVal -}}
  {{- else -}}
    {{- $iVal = index ($dRed.Get "t") $i -}}
    {{- $join = " > " -}}
  {{- end -}}
  {{- $tGem = joinStr $join $tGem (joinStr "" "`" $iVal "`") -}}
{{- end -}}

{{ $f := cslice }}
{{ if and (eq 1 $wsNum) (eq 1 (len (toRune $wFirst))) }}
  {{ $f = $f.Append (sdict "name" "Letter Gematria" "value" $tGem) }}
  {{ if $dHebIdx.HasKey $wFirst }}
    {{ $cIdx := $dHebIdx.Get $wFirst }}
    {{ $cNum := add 1 $cIdx }}
    {{ $f = $f.Append (sdict "name" "Letter Number" "value" (joinStr "" "`" $cNum "`")) }}

    {{ $dRwsNum := (dbGet $gCatID "RWS Numeral Dictionary").Value }}
    {{ $dThothNum := (dbGet $gCatID "Thoth Numeral Dictionary").Value }}
    {{ $dRwsCard := (dbGet $gCatID "RWS Tarot Dictionary").Value }}
    {{ $dThothCard := (dbGet $gCatID "Thoth Tarot Dictionary").Value }}

    {{ $rwsCard := joinStr " - " ($dRwsNum.Get $cIdx) ($dRwsCard.Get $cIdx) }}
    {{ $thothCard := joinStr " - " ($dThothNum.Get $cIdx) ($dThothCard.Get $cIdx) }}
    {{ if eq $rwsCard $thothCard }}
      {{ $f = $f.Append (sdict "name" "Major Arcana" "value" $rwsCard) }}
    {{ else }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (RWS)" "value" $rwsCard) }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (Thoth)" "value" $thothCard) }}
    {{ end }}
  {{ end }}
{{ else }}
  {{ if gt $wsNum 1 }}
    {{ $f = $f.Append (sdict "name" "Word Count" "value" (joinStr "" "`" $wsNum "`")) }}
  {{ end }}
  {{ $f = $f.Append (sdict "name" "Word Length" "value" $wLen) }}
  {{ $f = $f.Append (sdict "name" "Word Gematria" "value" $wGem) }}
  {{ if and (gt $lsNum 1) (ne $wsNum $lsNum) }}
    {{ $f = $f.Append (sdict "name" "Line Count" "value" (joinStr "" "`" $lsNum "`")) }}
    {{ $f = $f.Append (sdict "name" "Line Length" "value" $lLen) }}
    {{ $f = $f.Append (sdict "name" "Line Gematria" "value" $lGem) }}
  {{ end }}
  {{ if gt $wsNum 1 }}
    {{ $f = $f.Append (sdict "name" "Total Length" "value" (joinStr "" "`" $tLen "`")) }}
    {{ $f = $f.Append (sdict "name" "Total Gematria" "value" $tGem) }}
  {{ end }}
{{ end }}
{{ if .ExecData.Fields }}
  {{ $f = $f.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagChanID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $f
) }}

{{ deleteTrigger $delTrigDelay }}
