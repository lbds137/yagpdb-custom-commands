{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text]" (carg "string" "text") }}
{{ $text := or .ExecData.Description ($args.Get 0) }}

{{ $globalDict := (dbGet 0 "Global").Value }}
{{ $deleteTriggerDelay := toInt ($globalDict.Get "Delete Trigger Delay") }}

{{ $gematriaDict := (dbGet 0 "Gematria").Value }}
{{ $gematriaValues := $gematriaDict.Get "Values" }}
{{ $tarotIndices := $gematriaDict.Get "Tarot Indices" }}

{{ $commandsDict := (dbGet 0 "Commands").Value }}
{{ $embed_exec := toInt ($commandsDict.Get "embed_exec") }}

{{ $channelsDict := (dbGet 0 "Channels").Value }}
{{ $yagpdbChannelID := toInt ($channelsDict.Get "YAGPDB") }}

{{ define "reduce" }}
  {{ $data := . }}
  {{ if lt ($data.Get "reductionStep") 10 }}
    {{ return $data }}
  {{ else }}
    {{ $nextReductionStep := 0 }}
    {{ $digits := split (toString ($data.Get "reductionStep")) "" }}
    {{- range $digit := $digits -}}
      {{- $nextReductionStep = add $nextReductionStep (toInt $digit) -}}
    {{- end -}}
    {{ $data.Set "reductionStep" $nextReductionStep }}
    {{ $data.Set "reductions" (($data.Get "reductions").Append (joinStr "" $nextReductionStep ($data.Get "separator"))) }}
    {{ $data.Set "depth" (add ($data.Get "depth") 1) }}

    {{ return (execTemplate "reduce" $data) }}
  {{ end }}
{{ end }}

{{ define "updateData" }}
  {{ $data := . }}
  {{ $dictToUpdate := $data.Get "dictionary" }}
  {{ $dictToUpdate.Set "tokens" (($dictToUpdate.Get "tokens").Append ($data.Get "token")) }}
  {{ $dictToUpdate.Set "lengths" (($dictToUpdate.Get "lengths").Append (joinStr "" ($data.Get "length") ($data.Get "separator"))) }}
  {{ $dictToUpdate.Set "values" (($dictToUpdate.Get "values").Append (joinStr "" ($data.Get "value") ($data.Get "separator"))) }}
  {{ $dictToUpdate.Set "reductions" (($dictToUpdate.Get "reductions").Append ($data.Get "reductions")) }}
  {{ $dictToUpdate.Set "depth" (toInt (max ($data.Get "depth") ($dictToUpdate.Get "depth"))) }}

  {{ return $data }}
{{ end }}

{{ define "buildGematriaStrings" }}
  {{ $data := . }}
  {{ $tokenCount := len ($data.Get "tokens") }}
  {{ $separatorLeft := "`" }}
  {{ $separatorRight := "`" }}
  {{ if gt $tokenCount 1 }}
    {{ $separatorLeft = "`[ " }}
    {{ $separatorRight = " ]`" }}
  {{ end }}
  {{ $lengthString := joinStr "" $separatorLeft (joinStr " " ($data.Get "lengths").StringSlice) $separatorRight }}
  {{ $gematriaString := "" }}
  {{ $previousReductions := cslice }}
  {{- range $i := seq -1 ($data.Get "depth") -}}
    {{- $iterationValue := "" -}}
    {{- $joinString := "" -}}
    {{- if lt $i 0 -}}
      {{- $previousReductions = $data.Get "values" -}}
      {{- $iterationValue = joinStr "" $separatorLeft (joinStr " " $previousReductions.StringSlice) $separatorRight -}}
    {{- else -}}
      {{- $currentReductions := cslice -}}
      {{- range $j := seq 0 $tokenCount -}}
        {{- $tokenReductions := index ($data.Get "reductions") $j -}}
        {{- if gt (len $tokenReductions) $i -}}
          {{- $currentReductions = $currentReductions.Append (index $tokenReductions $i) -}}
        {{- else -}}
          {{- $currentReductions = $currentReductions.Append (index $previousReductions $j) -}}
        {{- end -}}
      {{- end -}}
      {{- $iterationValue = joinStr "" $separatorLeft (joinStr " " $currentReductions.StringSlice) $separatorRight -}}
      {{- $joinString = " > " -}}
      {{- $previousReductions = $currentReductions -}}
    {{- end -}}
    {{- $gematriaString = joinStr $joinString $gematriaString $iterationValue -}}
  {{- end -}}
  {{ $data.Set "count" $tokenCount }}
  {{ $data.Set "lengthString" $lengthString }}
  {{ $data.Set "gematriaString" $gematriaString }}

  {{ return $data }}
{{ end }}

{{ $dataDict := sdict "text" sdict "line" sdict "word" sdict }}
{{- range $key, $value := $dataDict -}}
  {{- $entry := sdict "tokens" cslice "lengths" cslice "values" cslice "reductions" cslice "depth" 0 -}}
  {{- $dataDict.Set $key $entry -}}
{{- end -}}

{{ $totalLength := 0 }}
{{ $totalValue := 0 }}
{{ $totalReductions := cslice }}
{{ $totalDepth := 0 }}
{{ $lines := split $text "\n" }}
{{- range $lineIndex, $line := $lines -}}
  {{- $lineLength := 0 -}}
  {{- $lineValue := 0 -}}
  {{- $lineReductions := cslice -}}
  {{- $lineDepth := 0 -}}
  {{- $words := split $line " " -}}
  {{- range $wordIndex, $word := $words -}}
    {{- $wordLength := 0 -}}
    {{- $wordValue := 0 -}}
    {{- $wordReductions := cslice -}}
    {{- $wordDepth := 0 -}}
    {{- $separator := "" -}}
    {{- if and (ne $lineIndex (sub (len $lines) 1)) (eq $wordIndex (sub (len $words) 1)) -}}
      {{- $separator = " |" -}}
    {{- end -}}
    {{- $characters := split $word "" -}}
    {{- range $character := $characters -}}
      {{- $characterValue := $gematriaValues.Get $character -}}
      {{- if $characterValue -}}
        {{- $wordLength = add $wordLength 1 -}}
        {{- $wordValue = add $wordValue $characterValue -}}
      {{- end -}}
    {{- end -}}

    {{- $wordReductionParam := sdict "reductionStep" $wordValue "reductions" $wordReductions "depth" $wordDepth "separator" $separator -}}
    {{- $wordReductionResult := execTemplate "reduce" $wordReductionParam -}}
    {{- $wordUpdateParam := sdict
      "dictionary" ($dataDict.Get "word") "separator" $separator "token" $word "length" $wordLength "value" $wordValue
      "reductions" ($wordReductionResult.Get "reductions") "depth" ($wordReductionResult.Get "depth") -}}
    {{- $dataDict.Set "word" ((execTemplate "updateData" $wordUpdateParam).Get "dictionary") -}}
    {{- $lineLength = add $lineLength $wordLength -}}
    {{- $lineValue = add $lineValue $wordValue -}}
  {{- end -}}

  {{- $lineReductionParam := sdict "reductionStep" $lineValue "reductions" $lineReductions "depth" $lineDepth "separator" "" -}}
  {{- $lineReductionResult := execTemplate "reduce" $lineReductionParam -}}
  {{- $lineUpdateParam := sdict
    "dictionary" ($dataDict.Get "line") "separator" "" "token" $line "length" $lineLength "value" $lineValue
    "reductions" ($lineReductionResult.Get "reductions") "depth" ($lineReductionResult.Get "depth") -}}
  {{- $dataDict.Set "line" ((execTemplate "updateData" $lineUpdateParam).Get "dictionary") -}}
  {{- $totalLength = add $totalLength $lineLength -}}
  {{- $totalValue = add $totalValue $lineValue -}}
{{- end -}}

{{ $totalReductionParam := sdict "reductionStep" $totalValue "reductions" $totalReductions "depth" $totalDepth "separator" "" }}
{{ $totalReductionResult := execTemplate "reduce" $totalReductionParam }}
{{ $totalUpdateParam := sdict
  "dictionary" ($dataDict.Get "text") "separator" "" "token" $text "length" $totalLength "value" $totalValue
  "reductions" ($totalReductionResult.Get "reductions") "depth" ($totalReductionResult.Get "depth") }}
{{ $dataDict.Set "text" ((execTemplate "updateData" $totalUpdateParam).Get "dictionary") }}

{{ $wordGematriaResult := execTemplate "buildGematriaStrings" ($dataDict.Get "word") }}
{{ $lineGematriaResult := execTemplate "buildGematriaStrings" ($dataDict.Get "line") }}
{{ $totalGematriaResult := execTemplate "buildGematriaStrings" ($dataDict.Get "text") }}
{{ $wordCount := $wordGematriaResult.Get "count" }}
{{ $lineCount := $lineGematriaResult.Get "count" }}
{{ $fields := cslice }}
{{ if eq 1 $wordCount }}
  {{ $word := index (($dataDict.Get "word").Get "tokens") 0 }}
  {{ if eq 1 (len (toRune $word)) }}
    {{ $fields = $fields.Append (sdict "name" "Letter Gematria" "value" ($totalGematriaResult.Get "gematriaString")) }}
    {{ $characterValue := $gematriaValues.Get $word }}
    {{ if $tarotIndices.HasKey $characterValue }}
      {{ $characterIndex := $tarotIndices.Get $characterValue }}
      {{ $fields = $fields.Append (sdict "name" "Letter Number" "value" (joinStr "" "`" (add 1 $characterIndex) "`")) }}
    {{ end }}
  {{ else }}
    {{ $fields = $fields.Append (sdict "name" "Word Length" "value" ($wordGematriaResult.Get "lengthString")) }}
    {{ $fields = $fields.Append (sdict "name" "Word Gematria" "value" ($wordGematriaResult.Get "gematriaString")) }}
  {{ end }}
{{ else }}
  {{ $fields = $fields.Append (sdict "name" "Word Count" "value" (joinStr "" "`" $wordCount "`")) }}
  {{ $fields = $fields.Append (sdict "name" "Word Length" "value" ($wordGematriaResult.Get "lengthString")) }}
  {{ $fields = $fields.Append (sdict "name" "Word Gematria" "value" ($wordGematriaResult.Get "gematriaString")) }}
  {{ if and (gt $lineCount 1) (ne $wordCount $lineCount) }}
    {{ $fields = $fields.Append (sdict "name" "Line Count" "value" (joinStr "" "`" $lineCount "`")) }}
    {{ $fields = $fields.Append (sdict "name" "Line Length" "value" ($lineGematriaResult.Get "lengthString")) }}
    {{ $fields = $fields.Append (sdict "name" "Line Gematria" "value" ($lineGematriaResult.Get "gematriaString")) }}
  {{ end }}
  {{ if gt $wordCount 1 }}
    {{ $fields = $fields.Append (sdict "name" "Total Length" "value" ($totalGematriaResult.Get "lengthString")) }}
    {{ $fields = $fields.Append (sdict "name" "Total Gematria" "value" ($totalGematriaResult.Get "gematriaString")) }}
  {{ end }}
{{ end }}
{{ $rwsNumerals := $gematriaDict.Get "RWS Numerals" }}
{{ $thothNumerals := $gematriaDict.Get "Thoth Numerals" }}
{{ $rwsNames := $gematriaDict.Get "RWS Names" }}
{{ $thothNames := $gematriaDict.Get "Thoth Names" }}
{{ $uniqueCards := cslice }}
{{ $cardCounts := dict }}
{{ range $character := split $text "" }}
  {{ $characterValue := $gematriaValues.Get $character }}
  {{ if $tarotIndices.HasKey $characterValue }}
    {{ $cardIndex := $tarotIndices.Get $characterValue }}
    {{ $count := toInt ($cardCounts.Get $cardIndex) }}
    {{ if eq $count 0 }}
      {{ $uniqueCards = $uniqueCards.Append $cardIndex }}
    {{ end }}
    {{ $cardCounts.Set $cardIndex (add 1 $count) }}
  {{ end }}
{{ end }}
{{ $uniqueCardCount := len $uniqueCards }}
{{ $rwsCards := cslice }}
{{ $thothCards := cslice }}
{{ range $cardIndex := $uniqueCards }}
  {{ $countString := "" }}
  {{ $count := $cardCounts.Get $cardIndex }}
  {{ if gt $count 1 }}
    {{ $countString = joinStr "" " (" $count ")" }}
  {{ end }}
  {{ $rwsCards = $rwsCards.Append (joinStr "" "`" ($rwsNumerals.Get $cardIndex) "` - " ($rwsNames.Get $cardIndex) $countString) }}
  {{ $thothCards = $thothCards.Append (joinStr "" "`" ($thothNumerals.Get $cardIndex) "` - " ($thothNames.Get $cardIndex) $countString) }}
{{ end }}
{{ $rwsString := joinStr "\n" $rwsCards.StringSlice }}
{{ $thothString := joinStr "\n" $thothCards.StringSlice }}
{{ $isHalfOrLessCards := le $uniqueCardCount 11 }}
{{ if and $rwsString $thothString $isHalfOrLessCards }}
  {{ $fields = $fields.Append (sdict "name" "Unique Arcana" "value" (joinStr "" "`" $uniqueCardCount "`")) }}
  {{ if eq $rwsString $thothString }}
    {{ $fields = $fields.Append (sdict "name" "Major Arcana" "value" $rwsString) }}
  {{ else }}
    {{ $fields = $fields.Append (sdict "name" "Major Arcana (RWS)" "value" $rwsString) }}
    {{ $fields = $fields.Append (sdict "name" "Major Arcana (Thoth)" "value" $thothString) }}
  {{ end }}
{{ end }}

{{ if .ExecData.Fields }}
  {{ $fields = $fields.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagpdbChannelID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $fields
) }}

{{ deleteTrigger $deleteTriggerDelay }}
