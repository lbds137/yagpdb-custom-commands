{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text]" (carg "string" "text") }}
{{ $text := or .ExecData.Description ($args.Get 0) }}

{{ $dGlob := (dbGet 0 "Global").Value }}
{{ $delTrigDelay := toInt ($dGlob.Get "Delete Trigger Delay") }}

{{ $dGem := (dbGet 0 "Gematria").Value }}
{{ $dVals := $dGem.Get "Values" }}
{{ $dTarotIdxs := $dGem.Get "Tarot Indices" }}

{{ $dComm := (dbGet 0 "Commands").Value }}
{{ $embed_exec := toInt ($dComm.Get "embed_exec") }}

{{ $dChan := (dbGet 0 "Channels").Value }}
{{ $yagChanID := toInt ($dChan.Get "YAGPDB") }}

{{ define "reduce" }}
  {{ $dData := . }}
  {{ if lt ($dData.Get "redStep") 10 }}
    {{ return $dData }}
  {{ else }}
    {{ $redNextStep := 0 }}
    {{ $digs := split (toString ($dData.Get "redStep")) "" }}
    {{- range $d := $digs -}}
      {{- $redNextStep = add $redNextStep (toInt $d) -}}
    {{- end -}}
    {{ $dData.Set "redStep" $redNextStep }}
    {{ $dData.Set "reds" (($dData.Get "reds").Append (joinStr "" $redNextStep ($dData.Get "sep"))) }}
    {{ $dData.Set "dep" (add ($dData.Get "dep") 1) }}

    {{ return (execTemplate "reduce" $dData) }}
  {{ end }}
{{ end }}

{{ define "updateData" }}
  {{ $dData := . }}
  {{ $dToUpdate := $dData.Get "dict" }}
  {{ $dToUpdate.Set "toks" (($dToUpdate.Get "toks").Append ($dData.Get "tok")) }}
  {{ $dToUpdate.Set "lens" (($dToUpdate.Get "lens").Append (joinStr "" ($dData.Get "len") ($dData.Get "sep"))) }}
  {{ $dToUpdate.Set "vals" (($dToUpdate.Get "vals").Append (joinStr "" ($dData.Get "val") ($dData.Get "sep"))) }}
  {{ $dToUpdate.Set "reds" (($dToUpdate.Get "reds").Append ($dData.Get "reds")) }}
  {{ $dToUpdate.Set "dep" (toInt (max ($dData.Get "dep") ($dToUpdate.Get "dep"))) }}

  {{ return $dData }}
{{ end }}

{{ define "buildGemStrs" }}
  {{ $dData := . }}
  {{ $tokCt := len ($dData.Get "toks") }}
  {{ $sepL := "`" }}
  {{ $sepR := "`" }}
  {{ if gt $tokCt 1 }}
    {{ $sepL = "`[ " }}
    {{ $sepR = " ]`" }}
  {{ end }}
  {{ $lenStr := joinStr "" $sepL (joinStr " " ($dData.Get "lens").StringSlice) $sepR }}
  {{ $gemStr := "" }}
  {{ $redsPrev := cslice }}
  {{- range $i := seq -1 ($dData.Get "dep") -}}
    {{- $iVal := "" -}}
    {{- $join := "" -}}
    {{- if lt $i 0 -}}
      {{- $redsPrev = $dData.Get "vals" -}}
      {{- $iVal = joinStr "" $sepL (joinStr " " $redsPrev.StringSlice) $sepR -}}
    {{- else -}}
      {{- $redsCur := cslice -}}
      {{- range $j := seq 0 $tokCt -}}
        {{- $tokReds := index ($dData.Get "reds") $j -}}
        {{- if gt (len $tokReds) $i -}}
          {{- $redsCur = $redsCur.Append (index $tokReds $i) -}}
        {{- else -}}
          {{- $redsCur = $redsCur.Append (index $redsPrev $j) -}}
        {{- end -}}
      {{- end -}}
      {{- $iVal = joinStr "" $sepL (joinStr " " $redsCur.StringSlice) $sepR -}}
      {{- $join = " > " -}}
      {{- $redsPrev = $redsCur -}}
    {{- end -}}
    {{- $gemStr = joinStr $join $gemStr $iVal -}}
  {{- end -}}
  {{ $dData.Set "ct" $tokCt }}
  {{ $dData.Set "lenStr" $lenStr }}
  {{ $dData.Set "gemStr" $gemStr }}

  {{ return $dData }}
{{ end }}

{{ $dData := sdict "t" sdict "l" sdict "w" sdict }}
{{- range $k, $v := $dData -}}
  {{- $dEntry := sdict "toks" cslice "lens" cslice "vals" cslice "reds" cslice "dep" 0 -}}
  {{- $dData.Set $k $dEntry -}}
{{- end -}}

{{ $tLen := 0 }}
{{ $tVal := 0 }}
{{ $tReds := cslice }}
{{ $tDep := 0 }}
{{ $lines := split $text "\n" }}
{{- range $i, $l := $lines -}}
  {{- $lLen := 0 -}}
  {{- $lVal := 0 -}}
  {{- $lReds := cslice -}}
  {{- $lDep := 0 -}}
  {{- $words := split $l " " -}}
  {{- range $j, $w := $words -}}
    {{- $wLen := 0 -}}
    {{- $wVal := 0 -}}
    {{- $wReds := cslice -}}
    {{- $wDep := 0 -}}
    {{- $sep := "" -}}
    {{- if and (ne $i (sub (len $lines) 1)) (eq $j (sub (len $words) 1)) -}}
      {{- $sep = " |" -}}
    {{- end -}}
    {{- $chars := split $w "" -}}
    {{- range $c := $chars -}}
      {{- $cVal := $dVals.Get $c -}}
      {{- if $cVal -}}
        {{- $wLen = add $wLen 1 -}}
        {{- $wVal = add $wVal $cVal -}}
      {{- end -}}
    {{- end -}}

    {{- $wRedParam := sdict "redStep" $wVal "reds" $wReds "dep" $wDep "sep" $sep -}}
    {{- $wRedRes := execTemplate "reduce" $wRedParam -}}
    {{- $wUdParam := sdict
      "dict" ($dData.Get "w") "sep" $sep "tok" $w "len" $wLen "val" $wVal
      "reds" ($wRedRes.Get "reds") "dep" ($wRedRes.Get "dep") -}}
    {{- $dData.Set "w" ((execTemplate "updateData" $wUdParam).Get "dict") -}}
    {{- $lLen = add $lLen $wLen -}}
    {{- $lVal = add $lVal $wVal -}}
  {{- end -}}

  {{- $lRedParam := sdict "redStep" $lVal "reds" $lReds "dep" $lDep "sep" "" -}}
  {{- $lRedRes := execTemplate "reduce" $lRedParam -}}
  {{- $lUdParam := sdict
    "dict" ($dData.Get "l") "sep" "" "tok" $l "len" $lLen "val" $lVal
    "reds" ($lRedRes.Get "reds") "dep" ($lRedRes.Get "dep") -}}
  {{- $dData.Set "l" ((execTemplate "updateData" $lUdParam).Get "dict") -}}
  {{- $tLen = add $tLen $lLen -}}
  {{- $tVal = add $tVal $lVal -}}
{{- end -}}

{{ $tRedParam := sdict "redStep" $tVal "reds" $tReds "dep" $tDep "sep" "" }}
{{ $tRedRes := execTemplate "reduce" $tRedParam }}
{{ $tUdParam := sdict
  "dict" ($dData.Get "t") "sep" "" "tok" $text "len" $tLen "val" $tVal
  "reds" ($tRedRes.Get "reds") "dep" ($tRedRes.Get "dep") }}
{{ $dData.Set "t" ((execTemplate "updateData" $tUdParam).Get "dict") }}

{{ $wBgsRes := execTemplate "buildGemStrs" ($dData.Get "w") }}
{{ $lBgsRes := execTemplate "buildGemStrs" ($dData.Get "l") }}
{{ $tBgsRes := execTemplate "buildGemStrs" ($dData.Get "t") }}
{{ $wCt := $wBgsRes.Get "ct" }}
{{ $lCt := $lBgsRes.Get "ct" }}
{{ $f := cslice }}
{{ if eq 1 $wCt }}
  {{ $w := index (($dData.Get "w").Get "toks") 0 }}
  {{ if eq 1 (len (toRune $w)) }}
    {{ $f = $f.Append (sdict "name" "Letter Gematria" "value" ($tBgsRes.Get "gemStr")) }}
    {{ if $dTarotIdxs.HasKey $w }}
      {{ $cIdx := $dTarotIdxs.Get $w }}
      {{ $f = $f.Append (sdict "name" "Letter Number" "value" (joinStr "" "`" (add 1 $cIdx) "`")) }}
    {{ end }}
  {{ else }}
    {{ $f = $f.Append (sdict "name" "Word Length" "value" ($wBgsRes.Get "lenStr")) }}
    {{ $f = $f.Append (sdict "name" "Word Gematria" "value" ($wBgsRes.Get "gemStr")) }}
  {{ end }}
{{ else }}
  {{ $f = $f.Append (sdict "name" "Word Count" "value" (joinStr "" "`" $wCt "`")) }}
  {{ $f = $f.Append (sdict "name" "Word Length" "value" ($wBgsRes.Get "lenStr")) }}
  {{ $f = $f.Append (sdict "name" "Word Gematria" "value" ($wBgsRes.Get "gemStr")) }}
  {{ if and (gt $lCt 1) (ne $wCt $lCt) }}
    {{ $f = $f.Append (sdict "name" "Line Count" "value" (joinStr "" "`" $lCt "`")) }}
    {{ $f = $f.Append (sdict "name" "Line Length" "value" ($lBgsRes.Get "lenStr")) }}
    {{ $f = $f.Append (sdict "name" "Line Gematria" "value" ($lBgsRes.Get "gemStr")) }}
  {{ end }}
  {{ if gt $wCt 1 }}
    {{ $f = $f.Append (sdict "name" "Total Length" "value" ($tBgsRes.Get "lenStr")) }}
    {{ $f = $f.Append (sdict "name" "Total Gematria" "value" ($tBgsRes.Get "gemStr")) }}
  {{ end }}
{{ end }}
{{ $dRwsNum := $dGem.Get "RWS Numerals" }}
{{ $dThothNum := $dGem.Get "Thoth Numerals" }}
{{ $dRwsNames := $dGem.Get "RWS Names" }}
{{ $dThothNames := $dGem.Get "Thoth Names" }}
{{ $uniqCds := cslice }}
{{ $cdCts := dict }}
{{ range $c := split $text "" }}
  {{ if $dTarotIdxs.HasKey $c }}
    {{ $cIdx := $dTarotIdxs.Get $c }}
    {{ $ct := toInt ($cdCts.Get $cIdx) }}
    {{ if eq $ct 0 }}
      {{ $uniqCds = $uniqCds.Append $cIdx }}
    {{ end }}
    {{ $cdCts.Set $cIdx (add 1 $ct) }}
  {{ end }}
{{ end }}
{{ $lenUniqCds := len $uniqCds }}
{{ $rwsCds := cslice }}
{{ $thothCds := cslice }}
{{ range $cIdx := $uniqCds }}
  {{ $ctStr := "" }}
  {{ $ct := $cdCts.Get $cIdx }}
  {{ if gt $ct 1 }}
    {{ $ctStr = joinStr "" " (" $ct ")" }}
  {{ end }}
  {{ $rwsCds = $rwsCds.Append (joinStr "" "`" ($dRwsNum.Get $cIdx) "` - " ($dRwsNames.Get $cIdx) $ctStr) }}
  {{ $thothCds = $thothCds.Append (joinStr "" "`" ($dThothNum.Get $cIdx) "` - " ($dThothNames.Get $cIdx) $ctStr) }}
{{ end }}
{{ $rwsStr := joinStr "\n" $rwsCds.StringSlice }}
{{ $thothStr := joinStr "\n" $thothCds.StringSlice }}
{{ $leHalfCds := le $lenUniqCds 11 }}
{{ if and $rwsStr $thothStr $leHalfCds }}
  {{ $f = $f.Append (sdict "name" "Unique Arcana" "value" (joinStr "" "`" $lenUniqCds "`")) }}
  {{ if eq $rwsStr $thothStr }}
    {{ $f = $f.Append (sdict "name" "Major Arcana" "value" $rwsStr) }}
  {{ else }}
    {{ $f = $f.Append (sdict "name" "Major Arcana (RWS)" "value" $rwsStr) }}
    {{ $f = $f.Append (sdict "name" "Major Arcana (Thoth)" "value" $thothStr) }}
  {{ end }}
{{ end }}

{{ if .ExecData.Fields }}
  {{ $f = $f.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagChanID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $f
) }}

{{ deleteTrigger $delTrigDelay }}
