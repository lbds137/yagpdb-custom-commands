{{- /*
  Author: Vladlena Costescu (@lbds137)
  Trigger type: `Command`
  Trigger: `gematria`
  Dependencies: `embed_exec`, `gematria_bootstrap`
*/ -}}

{{ $args := parseArgs 1 "Usage: [text from which to compute gematria]"
  (carg "string" "text") }}

{{ $text := or .ExecData.Description ($args.Get 0) }}
{{ $text = reReplace `â€Ž` $text "" }}

{{ $gCatID := toInt (dbGet 0 "Global").Value }}
{{ $commCatID := toInt (dbGet 0 "Commands").Value }}
{{ $chanCatID := toInt (dbGet 0 "Channels").Value }}

{{ $gemDict := (dbGet $gCatID "Gematria Dictionary").Value }}
{{ $hebIndDict := (dbGet $gCatID "Hebrew Index Dictionary").Value }}
{{ $delTrigDelay := or (toInt (dbGet $gCatID "Delete Trigger Delay").Value) 5 }}
{{ $embed_exec := toInt (dbGet $commCatID "embed_exec").Value }}
{{ $yagChanID := toInt (dbGet $chanCatID "YAGPDB Channel ID").Value }}

{{ $textDict := sdict "t" "" "l" cslice "w" cslice }}
{{ $lenDict := sdict "t" 0 "l" cslice "w" cslice }}
{{ $valDict := sdict "t" 0 "l" cslice "w" cslice }}
{{ $redDict := sdict "t" cslice "l" cslice "w" cslice }}

{{ $lenTotal := 0 }}
{{ $valTotal := 0 }}
{{ $redTotal := cslice }}
{{ $depTotal := 0 }}

{{ $maxDepLine := 0 }}
{{ $maxDepWord := 0 }}

{{ $lines := split $text "\n" }}
{{- range $line := $lines -}}
  {{- $lenLine := 0 -}}
  {{- $valLine := 0 -}}
  {{- $redLine := cslice -}}
  {{- $depLine := 0 -}}

  {{- $words := split $line " " -}}
  {{- range $word := $words -}}
    {{- $lenWord := 0 -}}
    {{- $valWord := 0 -}}
    {{- $redWord := cslice -}}
    {{- $depWord := 0 -}}

    {{- range $letter := split $word "" -}}
      {{- $valLetter := $gemDict.Get $letter -}}
      {{- if $valLetter -}}
        {{- $lenWord = add $lenWord 1 -}}
        {{- $valWord = add $valWord $valLetter -}}
      {{- end -}}
    {{- end -}}

    {{- $red := $valWord -}}
    {{- while ge $red 10 -}}
      {{- $redStep := 0 -}}
      {{- range $digit := split (toString $red) "" -}}
        {{- $redStep = add $redStep (toInt $digit) -}}
      {{- end -}}
      {{- $redWord = $redWord.Append (toString $redStep) -}}
      {{- $red = $redStep -}}
      {{- $depWord = add $depWord 1 -}}
    {{- end -}}

    {{- $textWords := $textDict.Get "w" -}}
    {{- $textWords = $textWords.Append $word -}}
    {{- $textDict.Set "w" $textWords -}}

    {{- $lenWords := $lenDict.Get "w" -}}
    {{- $lenWords = $lenWords.Append (toString $lenWord) -}}
    {{- $lenDict.Set "w" $lenWords -}}

    {{- $valWords := $valDict.Get "w" -}}
    {{- $valWords = $valWords.Append (toString $valWord) -}}
    {{- $valDict.Set "w" $valWords -}}

    {{- $redWords := $redDict.Get "w" -}}
    {{- $redWords = $redWords.Append $redWord -}}
    {{- $redDict.Set "w" $redWords -}}

    {{- if gt $depWord $maxDepWord -}}
      {{- $maxDepWord = $depWord -}}
    {{- end -}}

    {{- $lenLine = add $lenLine $lenWord -}}
    {{- $valLine = add $valLine $valWord -}}
  {{- end -}}

  {{- $red := $valLine -}}
  {{- while ge $red 10 -}}
    {{- $redStep := 0 -}}
    {{- range $digit := split (toString $red) "" -}}
      {{- $redStep = add $redStep (toInt $digit) -}}
    {{- end -}}
    {{- $redLine = $redLine.Append (toString $redStep) -}}
    {{- $red = $redStep -}}
    {{- $depLine = add $depLine 1 -}}
  {{- end -}}

  {{- $textLines := $textDict.Get "l" -}}
  {{- $textLines = $textLines.Append $line -}}
  {{- $textDict.Set "l" $textLines -}}

  {{- $lenLines := $lenDict.Get "l" -}}
  {{- $lenLines = $lenLines.Append (toString $lenLine) -}}
  {{- $lenDict.Set "l" $lenLines -}}

  {{- $valLines := $valDict.Get "l" -}}
  {{- $valLines = $valLines.Append (toString $valLine) -}}
  {{- $valDict.Set "l" $valLines -}}

  {{- $redLines := $redDict.Get "l" -}}
  {{- $redLines = $redLines.Append $redLine -}}
  {{- $redDict.Set "l" $redLines -}}

  {{- if gt $depLine $maxDepLine -}}
    {{- $maxDepLine = $depLine -}}
  {{- end -}}

  {{- $lenTotal = add $lenTotal $lenLine -}}
  {{- $valTotal = add $valTotal $valLine -}}
{{- end -}}

{{- $red := $valTotal -}}
{{- while ge $red 10 -}}
  {{- $redStep := 0 -}}
  {{- range $digit := split (toString $red) "" -}}
    {{- $redStep = add $redStep (toInt $digit) -}}
  {{- end -}}
  {{- $redTotal = $redTotal.Append (toString $redStep) -}}
  {{- $red = $redStep -}}
  {{- $depTotal = add $depTotal 1 -}}
{{- end -}}

{{ $textDict.Set "t" $text }}
{{ $lenDict.Set "t" $lenTotal }}
{{ $valDict.Set "t" $valTotal }}
{{ $redDict.Set "t" $redTotal }}

{{ $nWords := len ($textDict.Get "w") }}
{{ $nLines := len ($textDict.Get "l") }}
{{ $firstWord := index ($textDict.Get "w") 0 }}

{{ $wSepL := "`" }}
{{ $wSepR := "`" }}
{{ if gt $nWords 1 }}
  {{ $wSepL = "`[" }}
  {{ $wSepR = "]`" }}
{{ end }}
{{ $wLen := joinStr "" $wSepL (joinStr " " ($lenDict.Get "w").StringSlice) $wSepR }}

{{ $lSepL := "`" }}
{{ $lSepR := "`" }}
{{ if gt $nLines 1 }}
  {{ $lSepL = "`[" }}
  {{ $lSepR = "]`" }}
{{ end }}
{{ $lLen := joinStr "" $lSepL (joinStr " " ($lenDict.Get "l").StringSlice) $lSepR }}

{{ $wGem := "" }}
{{ $wRedPrev := cslice }}
{{- range $i := seq -1 $maxDepWord -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $wRedPrev = $valDict.Get "w" -}}
    {{- $iVal = joinStr "" $wSepL (joinStr " " $wRedPrev.StringSlice) $wSepR -}}
  {{- else -}}
    {{- $wRedCur := cslice -}}
    {{- range $j := seq 0 $nWords -}}
      {{- $wReds := index ($redDict.Get "w") $j -}}
      {{- if gt (len $wReds) $i -}}
        {{- $wRedCur = $wRedCur.Append (index $wReds $i) -}}
      {{- else -}}
        {{- $wRedCur = $wRedCur.Append (index $wRedPrev $j) -}}
      {{- end -}}
    {{- end -}}
    {{- $iVal = joinStr "" $wSepL (joinStr " " $wRedCur.StringSlice) $wSepR -}}
    {{- $join = " > " -}}
    {{- $wRedPrev = $wRedCur -}}
  {{- end -}}
  {{- $wGem = joinStr $join $wGem $iVal -}}
{{- end -}}

{{ $lGem := "" }}
{{ $lRedPrev := cslice }}
{{- range $i := seq -1 $maxDepLine -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $lRedPrev = $valDict.Get "l" -}}
    {{- $iVal = joinStr "" $lSepL (joinStr " " $lRedPrev.StringSlice) $lSepR -}}
  {{- else -}}
    {{- $lRedCur := cslice -}}
    {{- range $j := seq 0 $nLines -}}
      {{- $lReds := index ($redDict.Get "l") $j -}}
      {{- if gt (len $lReds) $i -}}
        {{- $lRedCur = $lRedCur.Append (index $lReds $i) -}}
      {{- else -}}
        {{- $lRedCur = $lRedCur.Append (index $lRedPrev $j) -}}
      {{- end -}}
    {{- end -}}
    {{- $iVal = joinStr "" $lSepL (joinStr " " $lRedCur.StringSlice) $lSepR -}}
    {{- $join = " > " -}}
    {{- $lRedPrev = $lRedCur -}}
  {{- end -}}
  {{- $lGem = joinStr $join $lGem $iVal -}}
{{- end -}}

{{ $tGem := "" }}
{{- range $i := seq -1 $depTotal -}}
  {{- $iVal := "" -}}
  {{- $join := "" -}}
  {{- if lt $i 0 -}}
    {{- $iVal = toString $valTotal -}}
  {{- else -}}
    {{- $iVal = index ($redDict.Get "t") $i -}}
    {{- $join = " > " -}}
  {{- end -}}
  {{- $tGem = joinStr $join $tGem (joinStr "" "`" $iVal "`") -}}
{{- end -}}

{{ $f := cslice }}
{{ if and (eq 1 $nWords) (eq 1 (len (toRune $firstWord))) }}
  {{ $f = $f.Append (sdict "name" "Letter Gematria" "value" $tGem "inline" false) }}
  {{ if $hebIndDict.HasKey $firstWord }}
    {{ $iLetter := $hebIndDict.Get $firstWord }}
    {{ $nLetter := add 1 $iLetter }}
    {{ $f = $f.Append (sdict "name" "Letter Number" "value" (joinStr "" "`" $nLetter "`") "inline" false) }}

    {{ $rwsNumDict := (dbGet $gCatID "RWS Numeral Dictionary").Value }}
    {{ $thothNumDict := (dbGet $gCatID "Thoth Numeral Dictionary").Value }}
    {{ $rwsCardDict := (dbGet $gCatID "RWS Tarot Dictionary").Value }}
    {{ $thothCardDict := (dbGet $gCatID "Thoth Tarot Dictionary").Value }}

    {{ $rwsCard := joinStr " - " ($rwsNumDict.Get $iLetter) ($rwsCardDict.Get $iLetter) }}
    {{ $thothCard := joinStr " - " ($thothNumDict.Get $iLetter) ($thothCardDict.Get $iLetter) }}
    {{ if eq $rwsCard $thothCard }}
      {{ $f = $f.Append (sdict "name" "Major Arcana" "value" $rwsCard "inline" false) }}
    {{ else }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (RWS)" "value" $rwsCard "inline" false) }}
      {{ $f = $f.Append (sdict "name" "Major Arcana (Thoth)" "value" $thothCard "inline" false) }}
    {{ end }}
  {{ end }}
{{ else }}
  {{ if gt $nWords 1 }}
    {{ $f = $f.Append (sdict "name" "Word Count" "value" (joinStr "" "`" $nWords "`") "inline" false) }}
  {{ end }}
  {{ $f = $f.Append (sdict "name" "Word Length" "value" $wLen "inline" false) }}
  {{ $f = $f.Append (sdict "name" "Word Gematria" "value" $wGem "inline" false) }}
  {{ if and (gt $nLines 1) (ne $nWords $nLines) }}
    {{ $f = $f.Append (sdict "name" "Line Count" "value" (joinStr "" "`" $nLines "`") "inline" false) }}
    {{ $f = $f.Append (sdict "name" "Line Length" "value" $lLen "inline" false) }}
    {{ $f = $f.Append (sdict "name" "Line Gematria" "value" $lGem "inline" false) }}
  {{ end }}
  {{ if gt $nWords 1 }}
    {{ $f = $f.Append (sdict "name" "Total Length" "value" (joinStr "" "`" $lenTotal "`") "inline" false) }}
    {{ $f = $f.Append (sdict "name" "Total Gematria" "value" $tGem "inline" false) }}
  {{ end }}
{{ end }}
{{ if .ExecData.Fields }}
  {{ $f = $f.AppendSlice .ExecData.Fields }}
{{ end }}

{{ execCC $embed_exec $yagChanID 0 (sdict
  "AuthorID" .User.ID
  "ChannelID" (or .ExecData.ChannelID .Channel.ID)
  "Title" (or .ExecData.Title "Gematria Calculator")
  "Description" $text
  "Fields" $f
) }}

{{ deleteTrigger $delTrigDelay }}
